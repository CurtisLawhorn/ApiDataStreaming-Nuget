name: Build & Publish NuGet Package to AWS CodeArtifact

on:
  push:
    tags:
      - 'v*' # runs only when tags like v1.0.1, v2.1.3 are pushed
  workflow_dispatch: # runs manually

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write # allows creating releases
      id-token: write # needed for AWS OIDC

    steps:
      # 1Ô∏è‚É£ Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # üîé Verify tag matches .csproj version
      - name: Verify tag matches .csproj version
        shell: bash
        run: |
          # Find the first .csproj in the repo
          csproj_file=$(find . -name "*.csproj" | head -n 1)
          echo "Using csproj file: $csproj_file"

          # Extract version from the .csproj
          csproj_version=$(grep -oPm1 "(?<=<Version>)[^<]+" "$csproj_file")

          # Remove leading 'v' from the Git tag
          tag_version="${GITHUB_REF_NAME#v}"

          echo "Tag version: $tag_version"
          echo "Project version: $csproj_version"

          if [ "$tag_version" != "$csproj_version" ]; then
            echo "‚ùå Version mismatch! Tag ($tag_version) does not match .csproj ($csproj_version)"
            exit 1
          fi

          echo "‚úÖ Version check passed"
          echo "TAG_VERSION=$tag_version" >> $GITHUB_ENV

      # 3Ô∏è‚É£ Restore dependencies
      - name: Restore
        run: dotnet restore

      # 4Ô∏è‚É£ Build project
      - name: Build
        run: dotnet build --configuration Release --no-restore

      # 5Ô∏è‚É£ Run tests
      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal

      # 6Ô∏è‚É£ Pack NuGet package (forces .csproj version for consistency)
      - name: Pack NuGet
        run: dotnet pack --configuration Release --no-build -o ./artifacts /p:PackageVersion=${{ env.TAG_VERSION }}

      # 7Ô∏è‚É£ Configure AWS credentials using OIDC role
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::689502032294:role/GitHubRoleForCodeArtifact
          aws-region: us-east-2

      # 8Ô∏è‚É£ Authenticate to CodeArtifact
      - name: Authenticate to CodeArtifact
        run: |
          export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token \
            --domain curtislawhorn-artifacts \
            --domain-owner 689502032294 \
            --query authorizationToken \
            --output text)

          # Add NuGet source using the token
          dotnet nuget remove source aws-codeartifact || true
          dotnet nuget add source \
            --name aws-codeartifact \
            --username aws \
            --password $CODEARTIFACT_AUTH_TOKEN \
            --store-password-in-clear-text \
            "https://curtislawhorn-artifacts-689502032294.d.codeartifact.us-east-2.amazonaws.com/nuget/CurtisLawhorn/v3/index.json"

      # 9Ô∏è‚É£ Push NuGet package to CodeArtifact
      - name: Push package to CodeArtifact
        run: dotnet nuget push ./artifacts/*.nupkg --source aws-codeartifact --skip-duplicate

      # üîü Create GitHub Release (uses full v1.2.3 tag)
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          files: ./artifacts/*.nupkg